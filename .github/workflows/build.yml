name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  packages: write

jobs:
  build-cli-tools:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          check-latest: true

      - name: Build CLI tools
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p build/bin
          go build -ldflags="-s -w" -trimpath -o build/bin/m2e-cli-${{ matrix.suffix }} ./cmd/m2e-cli
          go build -ldflags="-s -w" -trimpath -o build/bin/m2e-server-${{ matrix.suffix }} ./cmd/m2e-server
          go build -ldflags="-s -w" -trimpath -o build/bin/m2e-mcp-${{ matrix.suffix }} ./cmd/m2e-mcp

      - name: Create CLI tools archive
        run: |
          cd build/bin
          tar -czf "m2e-cli-tools-${{ matrix.suffix }}.tar.gz" m2e-cli-${{ matrix.suffix }} m2e-server-${{ matrix.suffix }} m2e-mcp-${{ matrix.suffix }}
          cd ../..

      - name: Upload CLI tools as artifact
        uses: actions/upload-artifact@v4
        with:
          name: m2e-cli-tools-${{ matrix.suffix }}
          path: build/bin/m2e-cli-tools-${{ matrix.suffix }}.*
          retention-days: 7

  build-macos:
    runs-on: macos-latest
    needs: build-cli-tools
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true

      - name: Install dependencies
        run: |
          brew install gnu-tar
          echo "PATH=/opt/homebrew/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1

      - name: Install frontend dependencies
        run: cd frontend && npm install

      - name: Build for macOS (Apple Silicon)
        run: |
          export CGO_ENABLED=1
          export GOOS=darwin
          export GOARCH=arm64
          export MACOSX_DEPLOYMENT_TARGET=15.0
          wails build -platform darwin/arm64 -o "Murican to English" -ldflags="-s -w" -trimpath -tags "production"

      - name: Build CLI tools for macOS (Apple Silicon)
        run: |
          export CGO_ENABLED=1
          export GOOS=darwin
          export GOARCH=arm64
          export MACOSX_DEPLOYMENT_TARGET=15.0
          go build -ldflags="-s -w" -trimpath -o build/bin/m2e-cli-arm64 ./cmd/m2e-cli
          go build -ldflags="-s -w" -trimpath -o build/bin/m2e-server-arm64 ./cmd/m2e-server
          go build -ldflags="-s -w" -trimpath -o build/bin/m2e-mcp-arm64 ./cmd/m2e-mcp

      - name: Get version from frontend package.json
        id: version
        run: echo "version=$(node -p "require('./frontend/package.json').version")" >> $GITHUB_OUTPUT

      - name: Set default version if not found
        if: steps.version.outputs.version == ''
        run: echo "version=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}" --force
          git push origin "v${{ steps.version.outputs.version }}" --force

      - name: Download all CLI tool artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: m2e-cli-tools-*
          path: cli-artifacts
          merge-multiple: true

      - name: Create ZIP archives
        run: |
          cd build/bin
          # Create app archive (keeping M2E.app as the actual app name)
          zip -r "m2e-app-arm64.zip" "M2E.app"
          # Create CLI tools archive
          zip "m2e-cli-tools-arm64.zip" m2e-cli-arm64 m2e-server-arm64 m2e-mcp-arm64
          cd ../..

      - name: Upload app as artifact
        uses: actions/upload-artifact@v4
        with:
          name: m2e-macos-arm64
          path: |
            build/bin/m2e-app-arm64.zip
            build/bin/m2e-cli-tools-arm64.zip
          retention-days: 7

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          files: |
            build/bin/m2e-app-arm64.zip
            build/bin/m2e-cli-tools-arm64.zip
            cli-artifacts/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
