name: VSCode Extension Build and Publish

on:
  workflow_dispatch:
  push:
    branches: [main]
    tags:
      - 'vscode-v*'
    paths:
      - 'pkg/**'
      - 'cmd/**'
      - 'vscode-extension/**'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'
      - '.github/workflows/vscode-publish.yml'
  pull_request:
    branches: [main]
    paths:
      - 'pkg/**'
      - 'cmd/**'
      - 'vscode-extension/**'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'
      - '.github/workflows/vscode-publish.yml'

env:
  GO_VERSION: '1.24'
  NODE_VERSION: '24'

jobs:
  # Test and build the main Go application
  build-main:
    name: Build Main Application
    runs-on: ubuntu-latest
    # Skip if commit message contains [skip-ci] or if triggered by PR
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') && !contains(github.event.pull_request.title, '[skip-ci]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run linting
        run: |
          go fmt ./...
          # Add golangci-lint if you have it configured
          # golangci-lint run

      - name: Run tests
        run: make test

      - name: Build CLI
        run: make build-cli

      - name: Build server
        run: make build-server

      - name: Build MCP server
        run: make build-mcp

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-binaries
          path: build/bin/
          retention-days: 1

  # Test and build the VSCode extension
  build-extension:
    name: Build VSCode Extension
    runs-on: ubuntu-latest
    needs: build-main
    # Skip if commit message contains [skip-ci] or if triggered by PR
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') && !contains(github.event.pull_request.title, '[skip-ci]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: vscode-extension/package-lock.json

      - name: Set up Go (for building server binaries)
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install extension dependencies
        working-directory: ./vscode-extension
        run: npm ci

      - name: Lint extension
        working-directory: ./vscode-extension
        run: npm run lint

      - name: Run extension tests
        working-directory: ./vscode-extension
        run: npm test

      - name: Build cross-platform binaries for extension
        run: |
          # Build binaries for all platforms that the extension supports
          GOOS=darwin GOARCH=arm64 go build -o vscode-extension/resources/bin/darwin-arm64/m2e-server ./cmd/m2e-server
          GOOS=linux GOARCH=amd64 go build -o vscode-extension/resources/bin/linux-x64/m2e-server ./cmd/m2e-server
          GOOS=linux GOARCH=arm64 go build -o vscode-extension/resources/bin/linux-arm64/m2e-server ./cmd/m2e-server

      - name: Compile extension
        working-directory: ./vscode-extension
        run: npm run compile

  # Automated version bumping for VSCode extension
  version-bump:
    name: Bump VSCode Extension Version
    runs-on: ubuntu-latest
    needs: [build-main, build-extension]
    # Only bump version when about to publish (main branch or manual trigger), skip PRs and [skip-ci] commits
    if: ${{ github.event_name != 'pull_request' && !contains(github.event.head_commit.message, '[skip-ci]') && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') }}
    permissions:
      contents: write
      packages: write
    outputs:
      new-version: ${{ steps.calc-version.outputs.new-version }}
      new-tag: ${{ steps.calc-version.outputs.new-tag }}
      main-version: ${{ steps.calc-version.outputs.main-version }}
      revision: ${{ steps.calc-version.outputs.revision }}
      version-changed: ${{ steps.calc-version.outputs.version-changed }}
      commit-sha: ${{ steps.version-bump.outputs.commit-sha }}
    steps:
      - name: Checkout code with full history
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate new version
        id: calc-version
        run: |
          # Get the latest main m2e version (remove 'v' prefix)
          MAIN_VERSION=$(git tag -l 'v*' | grep -v 'vscode' | sort -V | tail -1 | sed 's/^v//')
          echo "Latest main version: $MAIN_VERSION"

          # Extract major.minor from main version for version calculation
          MAJOR=$(echo "$MAIN_VERSION" | cut -d. -f1)
          MINOR=$(echo "$MAIN_VERSION" | cut -d. -f3)  # Use patch as minor
          
          # Find existing VSCode extension versions for this base version
          EXISTING_VSCODE_VERSIONS=$(git tag -l "vscode-v${MAJOR}.${MINOR}.*" | wc -l)
          NEXT_REVISION=$((EXISTING_VSCODE_VERSIONS + 1))

          # Create new VSCode extension version using semantic versioning
          NEW_VERSION="${MAJOR}.${MINOR}.${NEXT_REVISION}"
          NEW_TAG="vscode-v${NEW_VERSION}"

          echo "Calculated new version: $NEW_VERSION"
          echo "New tag: $NEW_TAG"

          # Check if this version already exists
          if git tag -l "$NEW_TAG" | grep -q "$NEW_TAG"; then
            echo "Version $NEW_TAG already exists, skipping version bump"
            echo "version-changed=false" >> $GITHUB_OUTPUT
          else
            echo "main-version=$MAIN_VERSION" >> $GITHUB_OUTPUT
            echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "new-tag=$NEW_TAG" >> $GITHUB_OUTPUT
            echo "revision=$NEXT_REVISION" >> $GITHUB_OUTPUT
            echo "version-changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Update package.json version
        if: steps.calc-version.outputs.version-changed == 'true'
        working-directory: ./vscode-extension
        run: |
          NEW_VERSION="${{ steps.calc-version.outputs.new-version }}"
          echo "Updating package.json to version: $NEW_VERSION"

          # Use jq to update version in package.json
          jq --arg version "$NEW_VERSION" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json

          # Verify the change
          echo "Updated version in package.json:"
          jq -r '.version' package.json

      - name: Commit version bump
        if: steps.calc-version.outputs.version-changed == 'true'
        id: version-bump
        run: |
          NEW_VERSION="${{ steps.calc-version.outputs.new-version }}"
          NEW_TAG="${{ steps.calc-version.outputs.new-tag }}"

          # Add and commit the version change
          git add vscode-extension/package.json
          git commit -m "chore(vscode): bump version to $NEW_VERSION [skip-ci]"

          # Create and push tag
          git tag "$NEW_TAG"
          git push origin HEAD:"${{ github.ref_name }}" || true  # Ignore if branch already exists
          git push origin "$NEW_TAG"

          # Get the commit SHA for the version bump
          COMMIT_SHA=$(git rev-parse HEAD)

          echo "newTag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "version-changed=true" >> $GITHUB_OUTPUT
          echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

          echo "âœ… Version bumped to $NEW_VERSION and tagged as $NEW_TAG (commit: $COMMIT_SHA)"

  # Publish to VS Code Marketplace (only on version tags or manual trigger)
  publish-extension:
    name: Publish VSCode Extension
    runs-on: ubuntu-latest
    needs: [build-main, build-extension, version-bump]
    # Only publish when version was changed or on explicit version tags, skip PRs and [skip-ci] commits
    if: ${{ github.event_name != 'pull_request' && !contains(github.event.head_commit.message, '[skip-ci]') && (needs.version-bump.outputs.version-changed == 'true' || startsWith(github.ref, 'refs/tags/vscode-v') || github.event_name == 'workflow_dispatch') }}
    steps:
      - name: Checkout code with updated version
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.version-bump.outputs.commit-sha || github.ref_name }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Go (for building server binaries)
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build cross-platform binaries for extension
        run: |
          # Build binaries for all platforms that the extension supports
          GOOS=darwin GOARCH=arm64 go build -o vscode-extension/resources/bin/darwin-arm64/m2e-server ./cmd/m2e-server
          GOOS=linux GOARCH=amd64 go build -o vscode-extension/resources/bin/linux-x64/m2e-server ./cmd/m2e-server
          GOOS=linux GOARCH=arm64 go build -o vscode-extension/resources/bin/linux-arm64/m2e-server ./cmd/m2e-server

      - name: Build extension with updated version
        working-directory: ./vscode-extension
        run: |
          # Install dependencies
          npm ci
          # Install vsce for packaging
          npm install -g @vscode/vsce
          # Compile and package with the updated version
          npm run compile
          vsce package

      - name: Install Open VSX CLI
        run: |
          npm install -g ovsx

      - name: Publish to VS Code Marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          # Find the newly built VSIX file
          VSIX_FILE=$(find ./vscode-extension -name "*.vsix" | head -1)
          if [ -z "$VSIX_FILE" ]; then
            echo "No VSIX file found!"
            exit 1
          fi

          echo "Publishing $VSIX_FILE to VS Code Marketplace..."
          vsce publish --packagePath "$VSIX_FILE"

      # - name: Publish to Open VSX Registry
      #   env:
      #     OVSX_PAT: ${{ secrets.OVSX_PAT }}
      #   run: |
      #     # Find the VSIX file
      #     VSIX_FILE=$(find . -name "*.vsix" | head -1)
      #     if [ -z "$VSIX_FILE" ]; then
      #       echo "No VSIX file found!"
      #       exit 1
      #     fi

      #     echo "Publishing $VSIX_FILE to Open VSX Registry..."
      #     ovsx publish "$VSIX_FILE" --pat "$OVSX_PAT"

      - name: Create GitHub Release
        if: needs.version-bump.outputs.version-changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG="${{ needs.version-bump.outputs.new-tag }}"
          NEW_VERSION="${{ needs.version-bump.outputs.new-version }}"
          RELEASE_NAME="VSCode Extension v${NEW_VERSION}"

          # Find the VSIX file
          VSIX_FILE=$(find ./vscode-extension -name "*.vsix" | head -1)
          if [ -z "$VSIX_FILE" ]; then
            echo "Error: No VSIX file found"
            exit 1
          fi

          # Create release with the new tag
          gh release create "${NEW_TAG}" "$VSIX_FILE" \
            --title "$RELEASE_NAME" \
            --notes "## VSCode Extension Release v${NEW_VERSION}

          This release includes the M2E VSCode extension with the following features:
          - American to British English spelling conversion
          - Imperial to metric unit conversion
          - Real-time diagnostics and quick fixes
          - Project-wide conversion and reporting

          ### Installation
          Search for \"M2E\" in the VSCode Extensions marketplace.

          ### Manual Installation
          Download the \`.vsix\` file and install via:
          \`\`\`
          code --install-extension ${VSIX_FILE##*/}
          \`\`\`

          Based on M2E core version ${{ needs.version-bump.outputs.main-version }}, VSCode extension revision ${{ needs.version-bump.outputs.revision }}."

