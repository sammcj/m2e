name: VSCode Extension Build and Publish

on:
  workflow_dispatch:
  push:
    branches: [main]
    tags:
      - 'vscode-v*'
    paths:
      - 'pkg/**'
      - 'cmd/**'
      - 'vscode-extension/**'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'
      - '.github/workflows/vscode-publish.yml'
  pull_request:
    branches: [main]
    paths:
      - 'pkg/**'
      - 'cmd/**'
      - 'vscode-extension/**'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'
      - '.github/workflows/vscode-publish.yml'

env:
  GO_VERSION: '1.24'
  NODE_VERSION: '24'

jobs:
  # Test and build the main Go application
  build-main:
    name: Build Main Application
    runs-on: ubuntu-latest
    # Skip if commit message contains [skip-ci] or if triggered by PR
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') && !contains(github.event.pull_request.title, '[skip-ci]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run linting
        run: |
          go fmt ./...
          # Add golangci-lint if you have it configured
          # golangci-lint run

      - name: Run tests
        run: make test

      - name: Build CLI
        run: make build-cli

      - name: Build server
        run: make build-server

      - name: Build MCP server
        run: make build-mcp

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-binaries
          path: build/bin/
          retention-days: 1

  # Test and build the VSCode extension
  build-extension:
    name: Build VSCode Extension
    runs-on: ubuntu-latest
    needs: build-main
    # Skip if commit message contains [skip-ci] or if triggered by PR
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') && !contains(github.event.pull_request.title, '[skip-ci]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: vscode-extension/package-lock.json

      - name: Set up Go (for building server binaries)
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install extension dependencies
        working-directory: ./vscode-extension
        run: npm ci

      - name: Lint extension
        working-directory: ./vscode-extension
        run: npm run lint

      - name: Run extension tests
        working-directory: ./vscode-extension
        run: npm test

      - name: Build cross-platform binaries for extension
        run: |
          # Build binaries for all platforms that the extension supports
          GOOS=darwin GOARCH=arm64 go build -o vscode-extension/resources/bin/darwin-arm64/m2e-server ./cmd/m2e-server
          GOOS=linux GOARCH=amd64 go build -o vscode-extension/resources/bin/linux-x64/m2e-server ./cmd/m2e-server
          GOOS=linux GOARCH=arm64 go build -o vscode-extension/resources/bin/linux-arm64/m2e-server ./cmd/m2e-server

      - name: Compile extension
        working-directory: ./vscode-extension
        run: npm run compile

      - name: Package extension
        working-directory: ./vscode-extension
        run: |
          npm install -g @vscode/vsce
          vsce package

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension
          path: vscode-extension/*.vsix
          retention-days: 1

  # Publish to VS Code Marketplace (only on version tags or manual trigger)
  publish-extension:
    name: Publish VSCode Extension
    runs-on: ubuntu-latest
    needs: [build-main, build-extension]
    # Only publish on version tags, main branch, or manual trigger, skip on PRs and [skip-ci] commits
    if: ${{ github.event_name != 'pull_request' && !contains(github.event.head_commit.message, '[skip-ci]') && (startsWith(github.ref, 'refs/tags/vscode-v') || github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download extension artifact
        uses: actions/download-artifact@v5
        with:
          name: vscode-extension
          path: ./

      - name: Install VSCE and Open VSX CLI
        run: |
          npm install -g @vscode/vsce
          npm install -g ovsx

      - name: Publish to VS Code Marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          # Find the VSIX file
          VSIX_FILE=$(find . -name "*.vsix" | head -1)
          if [ -z "$VSIX_FILE" ]; then
            echo "No VSIX file found!"
            exit 1
          fi

          echo "Publishing $VSIX_FILE to VS Code Marketplace..."
          vsce publish --packagePath "$VSIX_FILE"

      # - name: Publish to Open VSX Registry
      #   env:
      #     OVSX_PAT: ${{ secrets.OVSX_PAT }}
      #   run: |
      #     # Find the VSIX file
      #     VSIX_FILE=$(find . -name "*.vsix" | head -1)
      #     if [ -z "$VSIX_FILE" ]; then
      #       echo "No VSIX file found!"
      #       exit 1
      #     fi

      #     echo "Publishing $VSIX_FILE to Open VSX Registry..."
      #     ovsx publish "$VSIX_FILE" --pat "$OVSX_PAT"

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/vscode-v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: VSCode Extension ${{ github.ref_name }}
          body: |
            ## VSCode Extension Release ${{ github.ref_name }}

            This release includes the M2E VSCode extension with the following features:
            - American to British English spelling conversion
            - Imperial to metric unit conversion
            - Real-time diagnostics and quick fixes
            - Project-wide conversion and reporting

            ### Installation
            Search for "M2E" in the VSCode Extensions marketplace.

            ### Manual Installation
            Download the `.vsix` file and install via:
            ```
            code --install-extension m2e-vscode-extension.vsix
            ```

          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/vscode-v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Find the VSIX file
          VSIX_FILE=$(find ./vscode-extension -name "m2e-vscode-*.vsix" | head -1)
          if [ -z "$VSIX_FILE" ]; then
            echo "Error: No VSIX file found"
            exit 1
          fi
          # Upload to the release
          gh release upload ${{ github.ref_name }} "$VSIX_FILE" --clobber

